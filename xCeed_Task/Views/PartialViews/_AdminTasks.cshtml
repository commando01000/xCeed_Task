@using Service.Layer.ViewModels.Tasks
@model Service.Layer.ViewModels.PaginatedResultVM<TaskVM>

<table id="tasksAdminTable" class="table table-bordered table-hover">
    <thead class="table-light">
        <tr>
            <th>Task Name</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Due Date</th>
            <th>Assigned User</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model.Items ?? new List<TaskVM>())
        {
            <tr>
                <td>@task.TaskName</td>
                <td>@(task.Description.Length > 50 ? task.Description.Substring(0, 50) + "..." : task.Description)</td>
                <td>
                    <span class="badge @GetPriorityClass(task.Priority)">
                        @task.Priority
                    </span>
                </td>
                <td>@task.DueDate.ToShortDateString()</td>
                <td>@(task.AssignedUserName != null ? @task.AssignedUserName : "Unassigned")</td>
                <td>
                    <a asp-controller="Task" asp-action="Details" asp-route-id="@task.Id" class="btn btn-sm btn-outline-info">Details</a>
                    <button class="btn btn-sm btn-outline-warning btn-edit" data-id="@task.Id">Edit</button>
                    <button class="btn btn-sm btn-outline-danger btn-delete" data-id="@task.Id">Delete</button>
                </td>
            </tr>

        }
    </tbody>
</table>
<div id="pagination">
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">

            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a data-page="@(Model.PageIndex - 1)" class="page-link">Previous</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Previous</span>
                </li>
            }

            @for (int i = 1; i <= Model.PagesCount; i++)
            {
                if (i == Model.PageIndex)
                {
                    <li data-page="@i" class="page-item active"><span class="page-link">@i</span></li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" data-page="@i">@i</a>
                    </li>
                }
            }

            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a data-page="@(Model.PageIndex + 1)" class="page-link">Next</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Next</span>
                </li>
            }

        </ul>
    </nav>
</div>

@functions {
    // Helper method to get the CSS class for the priority badge
    string GetPriorityClass(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.High => "bg-danger text-white",
            TaskPriority.Medium => "bg-warning text-dark",
            TaskPriority.Low => "bg-success text-white",
            _ => "bg-secondary text-white"
        };
    }
}